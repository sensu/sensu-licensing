package licensing

// automatically generated file, do not edit!

import (
  "path"
  "reflect"

  corev3 "github.com/sensu/core/v3"
  apitools "github.com/sensu/sensu-api-tools"
)

func init() {
  for _, t := range typeMap {
    switch t := newResource(t).(type) {
      case corev3.Resource:
        apitools.RegisterType(path.Join(GroupName, Version), newResource(t))
    }
  }
}

// typeMap is used to dynamically look up data types from strings.
var typeMap = map[string]interface{}{ {{ range $index, $typename := .TypeNames }}
  "{{ $typename }}": &{{ $typename }}{},
  "{{ snakeCase $typename }}": &{{ $typename }}{}, {{ end }}
}

// Make a new Resource to avoid aliasing problems with ResolveResource.
// don't use this function. no, seriously.
func newResource(r interface{}) interface{} {
	return reflect.New(reflect.ValueOf(r).Elem().Type()).Interface()
}
